# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2025-02-19T13:25:05+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Literal, Optional, Union

from pydantic import BaseModel, Field, RootModel


class AccountBalance(BaseModel):
    address: str = Field(..., title='Address')
    balance: str = Field(..., title='Balance')
    state_init: Optional[str] = Field(None, title='State Init')


class BocRequest(BaseModel):
    boc: str = Field(..., title='Boc')
    format: Optional[str] = Field('base64', title='Format')
    balances: Optional[List[AccountBalance]] = Field(None, title='Balances')


class DedustAssetExtraCurrency(BaseModel):
    type: Literal['extra_currency'] = Field('extra_currency', title='Type')
    currency_id: int = Field(..., title='Currency Id')


class DedustAssetJetton(BaseModel):
    type: Literal['jetton'] = Field('jetton', title='Type')
    workchain_id: int = Field(..., title='Workchain Id')
    address: str = Field(..., title='Address')


class DedustAssetNative(BaseModel):
    type: Literal['native'] = Field('native', title='Type')


class DedustDepositLiquidityParams(BaseModel):
    type: Literal['liquidity_params'] = Field('liquidity_params', title='Type')
    min_lp_amount: int = Field(..., title='Min Lp Amount')
    asset0_target_balance: int = Field(..., title='Asset0 Target Balance')
    asset1_target_balance: int = Field(..., title='Asset1 Target Balance')


class DedustPoolTypeStable(BaseModel):
    type: Literal['stable'] = Field('stable', title='Type')


class DedustPoolTypeVolatile(BaseModel):
    type: Literal['volatile'] = Field('volatile', title='Type')


class DedustSwapAddrs(BaseModel):
    type: Literal['dedust_addrs'] = Field('dedust_addrs', title='Type')
    sender_addr: Optional[str] = Field(..., title='Sender Addr')
    referral_addr: Optional[str] = Field(..., title='Referral Addr')
    reserve0: int = Field(..., title='Reserve0')
    reserve1: int = Field(..., title='Reserve1')


class DedustSwapParams(BaseModel):
    type: Literal['swap_params'] = Field('swap_params', title='Type')
    deadline: int = Field(..., title='Deadline')
    recipient_addr: Optional[str] = Field(..., title='Recipient Addr')
    referral_addr: Optional[str] = Field(..., title='Referral Addr')
    fulfill_payload: Optional[str] = Field(..., title='Fulfill Payload')
    reject_payload: Optional[str] = Field(..., title='Reject Payload')


class ExtOutMsgBody(BaseModel):
    type: Literal['dedust_swap'] = Field('dedust_swap', title='Type')
    asset_in: Optional[
        Union[DedustAssetNative, DedustAssetJetton, DedustAssetExtraCurrency]
    ] = Field(..., title='Asset In')
    asset_out: Optional[
        Union[DedustAssetNative, DedustAssetJetton, DedustAssetExtraCurrency]
    ] = Field(..., title='Asset Out')
    amount_in: int = Field(..., title='Amount In')
    amount_out: int = Field(..., title='Amount Out')
    swap_addrs: DedustSwapAddrs


class ExternalOutMsgModel(BaseModel):
    type: Literal['ext_out_msg'] = Field('ext_out_msg', title='Type')
    src: str = Field(..., examples=['0:29f6eef...'], title='Address')
    dest: Optional[str] = Field(..., title='Dest')
    body_raw: Optional[str] = Field(None, title='Body Raw')
    decoded_op: Optional[str] = Field(None, title='Decoded Op')
    decoded_body: Optional[ExtOutMsgBody] = Field(None, title='Decoded Body')


class ForwardPayloadComment(BaseModel):
    type: Literal['comment'] = Field('comment', title='Type')
    comment: str = Field(..., title='Comment')


class ForwardPayloadStonfiProvideLiquidity(BaseModel):
    type: Literal['stonfi_provide_liquidity'] = Field(
        'stonfi_provide_liquidity', title='Type'
    )
    token_wallet: Optional[str] = Field(..., title='Token Wallet')
    min_lp_out: int = Field(..., title='Min Lp Out')


class ForwardPayloadStonfiSwap(BaseModel):
    type: Literal['stonfi_swap'] = Field('stonfi_swap', title='Type')
    token_wallet: Optional[str] = Field(..., title='Token Wallet')
    min_out: int = Field(..., title='Min Out')
    to_address: Optional[str] = Field(..., title='To Address')
    referral_address: Optional[str] = Field(..., title='Referral Address')


class ForwardPayloadStonfiSwapOk(BaseModel):
    type: Literal['stonfi_swap_ok'] = Field('stonfi_swap_ok', title='Type')


class ForwardPayloadStonfiSwapOkRef(BaseModel):
    type: Literal['stonfi_swap_ok_ref'] = Field('stonfi_swap_ok_ref', title='Type')


class InternalMsgBodyComment(BaseModel):
    type: Literal['comment'] = Field('comment', title='Type')
    comment: str = Field(..., title='Comment')


class InternalMsgBodyDedustCancelDeposit(BaseModel):
    type: Literal['dedust_cancel_deposit'] = Field(
        'dedust_cancel_deposit', title='Type'
    )
    query_id: int = Field(..., title='Query Id')
    payload: Optional[str] = Field(..., title='Payload')


class InternalMsgBodyDedustCreateVault(BaseModel):
    type: Literal['dedust_create_vault'] = Field('dedust_create_vault', title='Type')
    query_id: int = Field(..., title='Query Id')
    asset: Optional[
        Union[DedustAssetNative, DedustAssetJetton, DedustAssetExtraCurrency]
    ] = Field(..., title='Asset')


class InternalMsgBodyDedustCreateVolatilePool(BaseModel):
    type: Literal['dedust_create_volatile_pool'] = Field(
        'dedust_create_volatile_pool', title='Type'
    )
    query_id: int = Field(..., title='Query Id')
    asset0: Optional[
        Union[DedustAssetNative, DedustAssetJetton, DedustAssetExtraCurrency]
    ] = Field(..., title='Asset0')
    asset1: Optional[
        Union[DedustAssetNative, DedustAssetJetton, DedustAssetExtraCurrency]
    ] = Field(..., title='Asset1')


class InternalMsgBodyDedustPayOutFromPool(BaseModel):
    type: Literal['dedust_pay_out_from_pool'] = Field(
        'dedust_pay_out_from_pool', title='Type'
    )
    query_id: int = Field(..., title='Query Id')
    proof: Optional[str] = Field(..., title='Proof')
    amount: int = Field(..., title='Amount')
    recipient_addr: Optional[str] = Field(..., title='Recipient Addr')
    payload: Optional[str] = Field(..., title='Payload')


class InternalMsgBodyDedustPayout(BaseModel):
    type: Literal['dedust_payout'] = Field('dedust_payout', title='Type')
    query_id: int = Field(..., title='Query Id')
    payload: Optional[str] = Field(..., title='Payload')


class InternalMsgBodyExcess(BaseModel):
    type: Literal['excess'] = Field('excess', title='Type')
    query_id: int = Field(..., title='Query Id')


class InternalMsgBodyJettonBurn(BaseModel):
    type: Literal['jetton_burn'] = Field('jetton_burn', title='Type')
    query_id: int = Field(..., title='Query Id')
    amount: int = Field(..., title='Amount')
    response_destination: Optional[str] = Field(..., title='Response Destination')
    custom_payload: Optional[str] = Field(..., title='Custom Payload')


class InternalMsgBodyJettonBurnNotification(BaseModel):
    type: Literal['jetton_burn_notification'] = Field(
        'jetton_burn_notification', title='Type'
    )
    query_id: int = Field(..., title='Query Id')
    amount: int = Field(..., title='Amount')
    sender: Optional[str] = Field(..., title='Sender')
    response_destination: Optional[str] = Field(..., title='Response Destination')


class InternalMsgBodyNftOwnershipAssigned(BaseModel):
    type: Literal['nft_ownership_assigned'] = Field(
        'nft_ownership_assigned', title='Type'
    )
    query_id: int = Field(..., title='Query Id')
    prev_owner: Optional[str] = Field(..., title='Prev Owner')
    forward_payload: Optional[str] = Field(..., title='Forward Payload')


class InternalMsgBodyNftTransfer(BaseModel):
    type: Literal['nft_transfer'] = Field('nft_transfer', title='Type')
    query_id: int = Field(..., title='Query Id')
    new_owner: Optional[str] = Field(..., title='New Owner')
    response_destination: Optional[str] = Field(..., title='Response Destination')
    custom_payload: Optional[str] = Field(..., title='Custom Payload')
    forward_amount: int = Field(..., title='Forward Amount')
    forward_payload: Optional[str] = Field(..., title='Forward Payload')


class InternalMsgBodyPtonTonTransfer(BaseModel):
    type: Literal['pton_ton_transfer'] = Field('pton_ton_transfer', title='Type')
    query_id: int = Field(..., title='Query Id')
    ton_amount: int = Field(..., title='Ton Amount')
    refund_address: Optional[str] = Field(..., title='Refund Address')
    forward_payload: Optional[str] = Field(..., title='Forward Payload')


class InternalMsgBodySetStartAt(BaseModel):
    type: Literal['set_start_at'] = Field('set_start_at', title='Type')
    query_id: int = Field(..., title='Query Id')
    timestamp: int = Field(..., title='Timestamp')


class InternalMsgBodyWalletV5ExtensionAction(BaseModel):
    type: Literal['wallet_v5_extension_action'] = Field(
        'wallet_v5_extension_action', title='Type'
    )
    query_id: int = Field(..., title='Query Id')
    actions: Optional[str] = Field(..., title='Actions')
    extended: Optional[str] = Field(..., title='Extended')


class Name(Enum):
    unknown = 'unknown'
    jetton_wallet_v1 = 'jetton_wallet_v1'
    jetton_wallet_v2 = 'jetton_wallet_v2'
    jetton_wallet_governed = 'jetton_wallet_governed'
    jetton_wallet_gas_pump_v1 = 'jetton_wallet_gas_pump_v1'
    jetton_wallet_ton_fun_v1 = 'jetton_wallet_ton_fun_v1'


class JettonWalletInterface(BaseModel):
    name: Name = Field(..., title='Name')
    code_hash: str = Field(..., title='Code Hash')


class Type(Enum):
    internal = 'internal'
    external_in = 'external_in'
    external_out = 'external_out'


class StonfiPayToParams(BaseModel):
    type: Literal['pay_to_params'] = Field('pay_to_params', title='Type')
    amount0_out: int = Field(..., title='Amount0 Out')
    token0_address: Optional[str] = Field(..., title='Token0 Address')
    amount1_out: int = Field(..., title='Amount1 Out')
    token1_address: Optional[str] = Field(..., title='Token1 Address')


class StonfiSwapAddrs(BaseModel):
    type: Literal['swap_addresses'] = Field('swap_addresses', title='Type')
    from_user: Optional[str] = Field(..., title='From User')


class StonfiV2AdditionalFields(BaseModel):
    type: Literal['additional_fields'] = Field('additional_fields', title='Type')
    to_user_address: Optional[str] = Field(..., title='To User Address')
    refund_address: Optional[str] = Field(..., title='Refund Address')
    excess_address: Optional[str] = Field(..., title='Excess Address')


class StonfiV2CrossSwapBody(BaseModel):
    type: Literal['stonfi_v2_cross_swap_body'] = Field(
        'stonfi_v2_cross_swap_body', title='Type'
    )
    min_out: int = Field(..., title='Min Out')
    receiver: Optional[str] = Field(..., title='Receiver')
    fwd_gas: int = Field(..., title='Fwd Gas')
    custom_payload: Optional[str] = Field(..., title='Custom Payload')
    refund_fwd_gas: int = Field(..., title='Refund Fwd Gas')
    refund_payload: Optional[str] = Field(..., title='Refund Payload')
    ref_fee: int = Field(..., title='Ref Fee')
    ref_address: Optional[str] = Field(..., title='Ref Address')


class StonfiV2SwapBody(BaseModel):
    type: Literal['stonfi_v2_swap_body'] = Field('stonfi_v2_swap_body', title='Type')
    min_out: int = Field(..., title='Min Out')
    receiver: Optional[str] = Field(..., title='Receiver')
    fwd_gas: int = Field(..., title='Fwd Gas')
    custom_payload: Optional[str] = Field(..., title='Custom Payload')
    refund_fwd_gas: int = Field(..., title='Refund Fwd Gas')
    refund_payload: Optional[str] = Field(..., title='Refund Payload')
    ref_fee: int = Field(..., title='Ref Fee')
    ref_address: Optional[str] = Field(..., title='Ref Address')


class TokenMetadataJetton(BaseModel):
    type: Literal['jetton'] = Field('jetton', title='Type')
    name: Optional[str] = Field(..., title='Name')
    symbol: Optional[str] = Field(..., title='Symbol')
    decimals: Optional[int] = Field(..., title='Decimals')
    owner_revoked: Optional[bool] = Field(False, title='Owner Revoked')
    wallet_interface: JettonWalletInterface


class TokenMetadataNative(BaseModel):
    type: Literal['native'] = Field('native', title='Type')
    name: str = Field(..., title='Name')
    symbol: str = Field(..., title='Symbol')
    decimals: int = Field(..., title='Decimals')


class StatusChange(Enum):
    unchanged = 'unchanged'
    frozen = 'frozen'
    deleted = 'deleted'


class Type1(Enum):
    negfunds = 'negfunds'
    nofunds = 'nofunds'
    ok = 'ok'


class Type2(Enum):
    skipped = 'skipped'
    vm = 'vm'


class Reason(Enum):
    no_state = 'no_state'
    bad_state = 'bad_state'
    no_gas = 'no_gas'
    suspended = 'suspended'


class TransactionComputePhase(BaseModel):
    type: Type2 = Field(..., title='Type')
    reason: Optional[Reason] = Field(..., title='Reason')
    success: Optional[bool] = Field(..., title='Success')
    msg_state_used: Optional[bool] = Field(..., title='Msg State Used')
    account_activated: Optional[bool] = Field(..., title='Account Activated')
    gas_fees: Optional[int] = Field(..., title='Gas Fees')
    gas_used: Optional[int] = Field(..., title='Gas Used')
    gas_limit: Optional[int] = Field(..., title='Gas Limit')
    gas_credit: Optional[int] = Field(..., title='Gas Credit')
    mode: Optional[int] = Field(..., title='Mode')
    exit_code: Optional[int] = Field(..., title='Exit Code')
    exit_arg: Optional[int] = Field(..., title='Exit Arg')
    vm_steps: Optional[int] = Field(..., title='Vm Steps')
    vm_init_state_hash: Optional[str] = Field(..., title='Vm Init State Hash')
    vm_final_state_hash: Optional[str] = Field(..., title='Vm Final State Hash')


class TransactionCreditPhase(BaseModel):
    due_fees_collected: Optional[int] = Field(..., title='Due Fees Collected')
    credit: Optional[int] = Field(..., title='Credit')


class OrigStatus(Enum):
    uninitialized = 'uninitialized'
    frozen = 'frozen'
    active = 'active'
    nonexist = 'nonexist'


class EndStatus(Enum):
    uninitialized = 'uninitialized'
    frozen = 'frozen'
    active = 'active'
    nonexist = 'nonexist'


class TransactionStoragePhase(BaseModel):
    storage_fees_collected: Optional[int] = Field(..., title='Storage Fees Collected')
    storage_fees_due: Optional[int] = Field(..., title='Storage Fees Due')
    status_change: Optional[StatusChange] = Field(..., title='Status Change')


class TransactionStorageUsed(BaseModel):
    cells: Optional[int] = Field(..., title='Cells')
    bits: Optional[int] = Field(..., title='Bits')


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class AuditResultWhitelisted(BaseModel):
    status: Literal['whitelisted'] = Field('whitelisted', title='Status')
    metadata: Union[TokenMetadataNative, TokenMetadataJetton] = Field(
        ..., discriminator='type', title='Metadata'
    )


class DedustPoolParams(BaseModel):
    type: Literal['pool_params'] = Field('pool_params', title='Type')
    pool_type: Optional[Union[DedustPoolTypeVolatile, DedustPoolTypeStable]] = Field(
        ..., title='Pool Type'
    )
    asset0: Optional[
        Union[DedustAssetNative, DedustAssetJetton, DedustAssetExtraCurrency]
    ] = Field(..., title='Asset0')
    asset1: Optional[
        Union[DedustAssetNative, DedustAssetJetton, DedustAssetExtraCurrency]
    ] = Field(..., title='Asset1')


class ForwardPayloadDedustDepositLiquidity(BaseModel):
    type: Literal['dedust_deposit_liquidity'] = Field(
        'dedust_deposit_liquidity', title='Type'
    )
    pool_params: DedustPoolParams
    min_lp_amount: int = Field(..., title='Min Lp Amount')
    asset0_target_balance: int = Field(..., title='Asset0 Target Balance')
    asset1_target_balance: int = Field(..., title='Asset1 Target Balance')
    fulfill_payload: Optional[str] = Field(..., title='Fulfill Payload')
    reject_payload: Optional[str] = Field(..., title='Reject Payload')


class ForwardPayloadStonfiV2Swap(BaseModel):
    type: Literal['stonfi_v2_swap'] = Field('stonfi_v2_swap', title='Type')
    token_wallet1: Optional[str] = Field(..., title='Token Wallet1')
    refund_address: Optional[str] = Field(..., title='Refund Address')
    excesses_address: Optional[str] = Field(..., title='Excesses Address')
    tx_deadline: int = Field(..., title='Tx Deadline')
    cross_swap_body: StonfiV2CrossSwapBody


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')


class InternalMsgBodyDedustDepositLiquidity(BaseModel):
    type: Literal['dedust_deposit_liquidity'] = Field(
        'dedust_deposit_liquidity', title='Type'
    )
    query_id: int = Field(..., title='Query Id')
    amount: int = Field(..., title='Amount')
    pool_params: DedustPoolParams
    params: DedustDepositLiquidityParams
    fulfill_payload: Optional[str] = Field(..., title='Fulfill Payload')
    reject_payload: Optional[str] = Field(..., title='Reject Payload')


class InternalMsgBodyStonfiPaymentRequest(BaseModel):
    type: Literal['stonfi_payment_request'] = Field(
        'stonfi_payment_request', title='Type'
    )
    query_id: int = Field(..., title='Query Id')
    owner: Optional[str] = Field(..., title='Owner')
    exit_code: int = Field(..., title='Exit Code')
    params: StonfiPayToParams


class InternalMsgBodyStonfiSwap(BaseModel):
    type: Literal['stonfi_swap'] = Field('stonfi_swap', title='Type')
    query_id: int = Field(..., title='Query Id')
    to_address: Optional[str] = Field(..., title='To Address')
    sender_address: Optional[str] = Field(..., title='Sender Address')
    jetton_amount: int = Field(..., title='Jetton Amount')
    min_out: int = Field(..., title='Min Out')
    has_ref_address: bool = Field(..., title='Has Ref Address')
    addrs: StonfiSwapAddrs


class InternalMsgBodyStonfiV2CbAddLiquidity(BaseModel):
    type: Literal['stonfi_v2_cb_add_liquidity'] = Field(
        'stonfi_v2_cb_add_liquidity', title='Type'
    )
    query_id: int = Field(..., title='Query Id')
    tot_am0: int = Field(..., title='Tot Am0')
    tot_am1: int = Field(..., title='Tot Am1')
    user_address: Optional[str] = Field(..., title='User Address')
    min_lp_out: int = Field(..., title='Min Lp Out')
    fwd_amount: int = Field(..., title='Fwd Amount')
    custom_payload_cs: Optional[str] = Field(..., title='Custom Payload Cs')
    additional_fields: StonfiV2AdditionalFields



class StonfiV2DexPayload(BaseModel):
    type: Literal['stonfi_v2_dex_payload'] = Field(
        'stonfi_v2_dex_payload', title='Type'
    )
    transferred_op: int = Field(..., title='Transferred Op')
    token_wallet1: Optional[str] = Field(..., title='Token Wallet1')
    refund_address: Optional[str] = Field(..., title='Refund Address')
    excesses_address: Optional[str] = Field(..., title='Excesses Address')
    tx_deadline: int = Field(..., title='Tx Deadline')
    swap_body: StonfiV2SwapBody


class TransactionActionPhase(BaseModel):
    success: bool = Field(..., title='Success')
    valid: bool = Field(..., title='Valid')
    no_funds: bool = Field(..., title='No Funds')
    status_change: Optional[StatusChange] = Field(..., title='Status Change')
    total_fwd_fees: Optional[int] = Field(..., title='Total Fwd Fees')
    total_action_fees: Optional[int] = Field(..., title='Total Action Fees')
    result_code: int = Field(..., title='Result Code')
    result_arg: Optional[int] = Field(..., title='Result Arg')
    tot_actions: int = Field(..., title='Tot Actions')
    spec_actions: int = Field(..., title='Spec Actions')
    skipped_actions: int = Field(..., title='Skipped Actions')
    msgs_created: int = Field(..., title='Msgs Created')
    action_list_hash: str = Field(..., title='Action List Hash')
    tot_msg_size: TransactionStorageUsed


class TransactionBouncePhase(BaseModel):
    type: Type1 = Field(..., title='Type')
    msg_size: Optional[TransactionStorageUsed] = None
    req_fwd_fees: Optional[int] = Field(..., title='Req Fwd Fees')
    msg_fees: Optional[int] = Field(..., title='Msg Fees')
    fwd_fees: Optional[int] = Field(..., title='Fwd Fees')


class InternalMsgBodyStonfiV2Swap(BaseModel):
    type: Literal['stonfi_v2_swap'] = Field('stonfi_v2_swap', title='Type')
    query_id: int = Field(..., title='Query Id')
    from_user: Optional[str] = Field(..., title='From User')
    left_amount: int = Field(..., title='Left Amount')
    right_amount: int = Field(..., title='Right Amount')
    dex_payload: StonfiV2DexPayload





class DecodeResult(BaseModel):
    combinator: str = Field(..., title='Combinator')
    decoded_op: Optional[str] = Field(..., title='Decoded Op')
    decoded_body: Optional[
        Union[
            MessageRelaxed,
            InternalMsgBodyExcess,
            InternalMsgBodyComment,
            InternalMsgBodyWalletV5SignedInternal,
            InternalMsgBodyWalletV5ExtensionAction,
            InternalMsgBodySetStartAt,
            InternalMsgBodyDedustSwap,
            InternalMsgBodyDedustSwapPeer,
            InternalMsgBodyDedustPayOutFromPool,
            InternalMsgBodyDedustPayout,
            InternalMsgBodyDedustCreateVault,
            InternalMsgBodyDedustCreateVolatilePool,
            InternalMsgBodyDedustCancelDeposit,
            InternalMsgBodyDedustDepositLiquidity,
            InternalMsgBodyStonfiSwap,
            InternalMsgBodyStonfiPaymentRequest,
            InternalMsgBodyPtonTonTransfer,
            InternalMsgBodyStonfiV2Swap,
            InternalMsgBodyStonfiV2CbAddLiquidity,
            InternalMsgBodyJettonTransfer,
            InternalMsgBodyJettonBurn,
            InternalMsgBodyJettonBurnNotification,
            InternalMsgBodyJettonInternalTransfer,
            InternalMsgBodyJettonTransferNotification,
            InternalMsgBodyNftTransfer,
            InternalMsgBodyNftOwnershipAssigned,
            ForwardPayloadComment,
            ForwardPayloadDedustSwap,
            ForwardPayloadDedustDepositLiquidity,
            ForwardPayloadStonfiSwap,
            ForwardPayloadStonfiSwapOk,
            ForwardPayloadStonfiSwapOkRef,
            ForwardPayloadStonfiProvideLiquidity,
            ForwardPayloadStonfiV2Swap,
            OutAction,
            ExtInMsgBody,
            DedustAssetNative,
            DedustAssetJetton,
            DedustAssetExtraCurrency,
            DedustPoolTypeVolatile,
            DedustPoolTypeStable,
            DedustPoolParams,
            DedustSwapStep,
            DedustSwapStepParams,
            DedustSwapParams,
            DedustDepositLiquidityParams,
            DedustSwapAddrs,
            ExtOutMsgBody,
            StonfiSwapAddrs,
            StonfiPayToParams,
            StonfiV2AdditionalFields,
            StonfiV2SwapBody,
            StonfiV2DexPayload,
            StonfiV2CrossSwapBody,
        ]
    ] = Field(..., title='Decoded Body')


class DedustSwapStep(BaseModel):
    type: Literal['step'] = Field('step', title='Type')
    pool_addr: Optional[str] = Field(..., title='Pool Addr')
    params: DedustSwapStepParams


class DedustSwapStepParams(BaseModel):
    type: Literal['step_params'] = Field('step_params', title='Type')
    kind_out: bool = Field(..., title='Kind Out')
    limit: int = Field(..., title='Limit')
    next: Optional[DedustSwapStep] = None


class EmulatorResult(BaseModel):
    result: Optional[TransactionModel] = None
    ok: bool = Field(..., title='Ok')
    exit_code: Optional[int] = Field(..., title='Exit Code')
    message: Optional[str] = Field(..., title='Message')


class ExtInMsgBody(BaseModel):
    type: Literal['wallet_v5_signed_external'] = Field(
        'wallet_v5_signed_external', title='Type'
    )
    wallet_id: int = Field(..., title='Wallet Id')
    valid_until: int = Field(..., title='Valid Until')
    seqno: int = Field(..., title='Seqno')
    actions: Optional[List[OutAction]] = Field(..., title='Actions')
    extended: Optional[str] = Field(..., title='Extended')
    signature: str = Field(..., title='Signature')


class ExternalInMsgModel(BaseModel):
    type: Literal['ext_in_msg'] = Field('ext_in_msg', title='Type')
    src: Optional[str] = Field(..., title='Src')
    dest: str = Field(..., examples=['0:29f6eef...'], title='Address')
    import_fee: int = Field(..., title='Import Fee')
    body_raw: Optional[str] = Field(None, title='Body Raw')
    decoded_op: Optional[str] = Field(None, title='Decoded Op')
    decoded_body: Optional[ExtInMsgBody] = Field(None, title='Decoded Body')


class ForwardPayloadDedustSwap(BaseModel):
    type: Literal['dedust_swap'] = Field('dedust_swap', title='Type')
    step: DedustSwapStep
    swap_params: DedustSwapParams


class InternalMsgBodyDedustSwap(BaseModel):
    type: Literal['dedust_swap'] = Field('dedust_swap', title='Type')
    query_id: int = Field(..., title='Query Id')
    amount: int = Field(..., title='Amount')
    step: DedustSwapStep
    swap_params: DedustSwapParams


class InternalMsgBodyDedustSwapPeer(BaseModel):
    type: Literal['dedust_swap_peer'] = Field('dedust_swap_peer', title='Type')
    query_id: int = Field(..., title='Query Id')
    proof: Optional[str] = Field(..., title='Proof')
    asset: Optional[
        Union[DedustAssetNative, DedustAssetJetton, DedustAssetExtraCurrency]
    ] = Field(..., title='Asset')
    amount: int = Field(..., title='Amount')
    sender_addr: Optional[str] = Field(..., title='Sender Addr')
    current: DedustSwapStepParams
    swap_params: DedustSwapParams


class InternalMsgBodyJettonInternalTransfer(BaseModel):
    type: Literal['jetton_internal_transfer'] = Field(
        'jetton_internal_transfer', title='Type'
    )
    query_id: int = Field(..., title='Query Id')
    amount: int = Field(..., title='Amount')
    from_: Optional[str] = Field(..., alias='from', title='From')
    response_address: Optional[str] = Field(..., title='Response Address')
    forward_ton_amount: int = Field(..., title='Forward Ton Amount')
    forward_payload: Optional[
        Union[
            ForwardPayloadComment,
            ForwardPayloadDedustSwap,
            ForwardPayloadDedustDepositLiquidity,
            ForwardPayloadStonfiSwap,
            ForwardPayloadStonfiSwapOk,
            ForwardPayloadStonfiSwapOkRef,
            ForwardPayloadStonfiProvideLiquidity,
            ForwardPayloadStonfiV2Swap,
        ]
    ] = Field(..., title='Forward Payload')


class InternalMsgBodyJettonTransfer(BaseModel):
    type: Literal['jetton_transfer'] = Field('jetton_transfer', title='Type')
    query_id: int = Field(..., title='Query Id')
    amount: int = Field(..., title='Amount')
    destination: Optional[str] = Field(..., title='Destination')
    response_destination: Optional[str] = Field(..., title='Response Destination')
    custom_payload: Optional[str] = Field(..., title='Custom Payload')
    forward_ton_amount: int = Field(..., title='Forward Ton Amount')
    forward_payload: Optional[
        Union[
            ForwardPayloadComment,
            ForwardPayloadDedustSwap,
            ForwardPayloadDedustDepositLiquidity,
            ForwardPayloadStonfiSwap,
            ForwardPayloadStonfiSwapOk,
            ForwardPayloadStonfiSwapOkRef,
            ForwardPayloadStonfiProvideLiquidity,
            ForwardPayloadStonfiV2Swap,
        ]
    ] = Field(..., title='Forward Payload')


class InternalMsgBodyJettonTransferNotification(BaseModel):
    type: Literal['jetton_transfer_notification'] = Field(
        'jetton_transfer_notification', title='Type'
    )
    query_id: int = Field(..., title='Query Id')
    amount: int = Field(..., title='Amount')
    sender: Optional[str] = Field(..., title='Sender')
    forward_payload: Optional[
        Union[
            ForwardPayloadComment,
            ForwardPayloadDedustSwap,
            ForwardPayloadDedustDepositLiquidity,
            ForwardPayloadStonfiSwap,
            ForwardPayloadStonfiSwapOk,
            ForwardPayloadStonfiSwapOkRef,
            ForwardPayloadStonfiProvideLiquidity,
            ForwardPayloadStonfiV2Swap,
        ]
    ] = Field(..., title='Forward Payload')


class InternalMsgBodyWalletV5SignedInternal(BaseModel):
    type: Literal['wallet_v5_signed_internal'] = Field(
        'wallet_v5_signed_internal', title='Type'
    )
    wallet_id: int = Field(..., title='Wallet Id')
    valid_until: int = Field(..., title='Valid Until')
    seqno: int = Field(..., title='Seqno')
    actions: Optional[List[OutAction]] = Field(..., title='Actions')
    extended: Optional[str] = Field(..., title='Extended')
    signature: str = Field(..., title='Signature')


class InternalMsgModel(BaseModel):
    type: Literal['int_msg'] = Field('int_msg', title='Type')
    ihr_disabled: bool = Field(..., title='Ihr Disabled')
    bounce: bool = Field(..., title='Bounce')
    bounced: bool = Field(..., title='Bounced')
    src: str = Field(..., examples=['0:29f6eef...'], title='Address')
    dest: str = Field(..., examples=['0:29f6eef...'], title='Address')
    value: int = Field(..., title='Value')
    ihr_fee: int = Field(..., title='Ihr Fee')
    fwd_fee: int = Field(..., title='Fwd Fee')
    created_lt: int = Field(..., title='Created Lt')
    created_at: int = Field(..., title='Created At')
    body_raw: Optional[str] = Field(None, title='Body Raw')
    decoded_op: Optional[str] = Field(None, title='Decoded Op')
    decoded_body: Optional[
        Union[
            InternalMsgBodyExcess,
            InternalMsgBodyComment,
            InternalMsgBodyWalletV5SignedInternal,
            InternalMsgBodyWalletV5ExtensionAction,
            InternalMsgBodySetStartAt,
            InternalMsgBodyDedustSwap,
            InternalMsgBodyDedustSwapPeer,
            InternalMsgBodyDedustPayOutFromPool,
            InternalMsgBodyDedustPayout,
            InternalMsgBodyDedustCreateVault,
            InternalMsgBodyDedustCreateVolatilePool,
            InternalMsgBodyDedustCancelDeposit,
            InternalMsgBodyDedustDepositLiquidity,
            InternalMsgBodyStonfiSwap,
            InternalMsgBodyStonfiPaymentRequest,
            InternalMsgBodyPtonTonTransfer,
            InternalMsgBodyStonfiV2Swap,
            InternalMsgBodyStonfiV2CbAddLiquidity,
            InternalMsgBodyJettonTransfer,
            InternalMsgBodyJettonBurn,
            InternalMsgBodyJettonBurnNotification,
            InternalMsgBodyJettonInternalTransfer,
            InternalMsgBodyJettonTransferNotification,
            InternalMsgBodyNftTransfer,
            InternalMsgBodyNftOwnershipAssigned,
        ]
    ] = Field(None, title='Decoded Body')


class MessageRelaxed(BaseModel):
    raw_body: str = Field(..., examples=['B5EE9C...'], title='Cell')
    type: Type = Field(..., title='Type')
    dest: str = Field(..., examples=['0:29f6eef...'], title='Address')
    value: Optional[str] = Field(None, title='Value')
    decoded_body: Optional[
        Union[
            InternalMsgBodyExcess,
            InternalMsgBodyComment,
            InternalMsgBodyWalletV5SignedInternal,
            InternalMsgBodyWalletV5ExtensionAction,
            InternalMsgBodySetStartAt,
            InternalMsgBodyDedustSwap,
            InternalMsgBodyDedustSwapPeer,
            InternalMsgBodyDedustPayOutFromPool,
            InternalMsgBodyDedustPayout,
            InternalMsgBodyDedustCreateVault,
            InternalMsgBodyDedustCreateVolatilePool,
            InternalMsgBodyDedustCancelDeposit,
            InternalMsgBodyDedustDepositLiquidity,
            InternalMsgBodyStonfiSwap,
            InternalMsgBodyStonfiPaymentRequest,
            InternalMsgBodyPtonTonTransfer,
            InternalMsgBodyStonfiV2Swap,
            InternalMsgBodyStonfiV2CbAddLiquidity,
            InternalMsgBodyJettonTransfer,
            InternalMsgBodyJettonBurn,
            InternalMsgBodyJettonBurnNotification,
            InternalMsgBodyJettonInternalTransfer,
            InternalMsgBodyJettonTransferNotification,
            InternalMsgBodyNftTransfer,
            InternalMsgBodyNftOwnershipAssigned,
            ExtInMsgBody,
            ExtOutMsgBody,
        ]
    ] = Field(None, title='Decoded Body')
    decoded_op: Optional[str] = Field(None, title='Decoded Op')


class OutAction(BaseModel):
    type: Literal['wallet_action_send_msg'] = Field(
        'wallet_action_send_msg', title='Type'
    )
    mode: int = Field(..., title='Mode')
    out_msg: Optional[MessageRelaxed] = None


class OutMsgs(
    RootModel[Union[InternalMsgModel, ExternalInMsgModel, ExternalOutMsgModel]]
):
    root: Union[InternalMsgModel, ExternalInMsgModel, ExternalOutMsgModel] = Field(
        ..., discriminator='type'
    )


class TransactionModel(BaseModel):
    account: str = Field(..., title='Account')
    lt: int = Field(..., title='Lt')
    prev_trans_hash: str = Field(..., title='Prev Trans Hash')
    prev_trans_lt: int = Field(..., title='Prev Trans Lt')
    now: int = Field(..., title='Now')
    orig_status: OrigStatus = Field(..., title='Orig Status')
    end_status: EndStatus = Field(..., title='End Status')
    in_msg: Optional[
        Union[InternalMsgModel, ExternalInMsgModel, ExternalOutMsgModel]
    ] = Field(..., title='In Msg')
    out_msgs: List[OutMsgs] = Field(..., title='Out Msgs')
    total_fees: int = Field(..., title='Total Fees')
    state_old_hash: str = Field(..., title='State Old Hash')
    state_new_hash: str = Field(..., title='State New Hash')
    type: Literal['ordinary'] = Field(..., title='Type')
    credit_first: bool = Field(..., title='Credit First')
    aborted: bool = Field(..., title='Aborted')
    destroyed: bool = Field(..., title='Destroyed')
    bounce_phase: Optional[TransactionBouncePhase] = None
    credit_phase: Optional[TransactionCreditPhase] = None
    compute_phase: Optional[TransactionComputePhase] = None
    storage_phase: Optional[TransactionStoragePhase] = None
    action_phase: Optional[TransactionActionPhase] = None
    raw: Optional[str] = Field(None, title='Raw')
    children: Optional[List[TransactionModel]] = Field([], title='Children')


DecodeResult.model_rebuild()
DedustSwapStep.model_rebuild()
EmulatorResult.model_rebuild()
ExtInMsgBody.model_rebuild()
InternalMsgBodyWalletV5SignedInternal.model_rebuild()
